{"mappings":";;AGAO,IAAM,yCAAQ,GAAG,SAAC,IAAY,EAArC;IACE,OAAO,QAAA,CAAA,MAAA,CAAS,IAAI,CAAE,CAAC;CACxB,AAAA;;AFFD;AIAA;AAEO,IAAM,yCAAkB,GAAG,SAAC,SAAiB,EAApD;IACE,IAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,AAAC;IACrD,IAAM,KAAK,GAAG,CAAA,GAAA,2BAAK,CAAA,CAAC,mBAAmB,CAAC,SAAS,CAAC,AAAA;IAClD,KAAK,CAAC,IAAI,EAAE,CAAC;CACd,AAAC;AAEK,IAAM,yCAAkB,GAAG,SAAC,SAAiB,EAApD;IACE,IAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,AAAC;IACrD,IAAM,KAAK,GAAG,CAAA,GAAA,2BAAK,CAAA,CAAC,mBAAmB,CAAC,SAAS,CAAC,AAAA;IAClD,KAAK,CAAC,IAAI,EAAE,CAAC;CACd,AAAA;AAEM,IAAM,yCAAmB,GAAG,SAAC,SAAiB,EAArD;IACE,IAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,AAAC;IACrD,IAAM,KAAK,GAAG,CAAA,GAAA,2BAAK,CAAA,CAAC,mBAAmB,CAAC,SAAS,CAAC,AAAA;IAClD,KAAK,CAAC,MAAM,EAAE,CAAC;CAChB,AAAA;;;AENM,IAAM,yCAAiB,GAAG,WAAjC;IACE,IAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,AAAC;IAC3C,IAAM,SAAS,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,AAAC;IACnD,IAAM,MAAM,GAAG,EAAE,AAAC;IAClB,SAAS,CAAC,OAAO,CAAC,SAAU,KAAK,EAAE,GAAG,EAAtC;QACE,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACrB,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;CACf,AAAC;AAUK,IAAM,yCAAkB,GAAG,SAAC,SAAiB,EAApD;IACE,IAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,AAAC;IAC3C,IAAM,SAAS,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,AAAC;IACnD,OAAO,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;CACjC,AAAC;;;AElCK,IAAM,yCAAqB,GAAG,SAAC,GAAW,EAAjD;IACE,IAAI,CAAC,GAAG,EACN,OAAO,EAAE,CAAC;IAEZ,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC;IAC9B,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAA,CAAC,EAAzB;Q,I,E,E,E,A;QACE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;QACb,IAAI,CAAC,CAAC,EACJ,OAAO,EAAE,CAAC;QAEZ,OAAO,AAAA,CAAA,AAAA,CAAA,EAAA,GAAA,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE,CAAA,GAAG,CAAA,AAAA,CAAA,EAAA,GAAA,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,EAAE,CAAA,AAAA,CAAC;KAC/D,CAAC,CAAA;IAEF,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAC5B,AAAA;","sources":["src/index.ts","index.ts","src/experimental/SayHello.ts","SayHello.ts","src/bootstrap/bootstrap_utilities.ts","bootstrap_utilities.ts","src/url/query_params.ts","query_params.ts","src/strings/sentences.ts","sentences.ts"],"sourcesContent":["import { SayHello } from \"./experimental/SayHello\";\r\nimport {\r\n  showBootstrapModal,\r\n  hideBootstrapModal,\r\n  toggleBootstrapMoal,\r\n} from \"./bootstrap/bootstrap_utilities\";\r\nimport { getQueryParamValue, getAllQueryParams } from \"./url/query_params\";\r\nimport { capitalizeFirstLetter } from \"./strings/sentences\";\r\n\r\nexport {\r\n  SayHello,\r\n  showBootstrapModal,\r\n  hideBootstrapModal,\r\n  toggleBootstrapMoal,\r\n  getQueryParamValue,\r\n  getAllQueryParams,\r\n  capitalizeFirstLetter\r\n};\r\n",null,"export const SayHello = (name: string): string => {\r\n  return `Hello ${name}`;\r\n}",null,"import Modal from 'bootstrap/js/dist/modal';\r\n\r\nexport const showBootstrapModal = (elementId: string): void => {\r\n  const myModalEl = document.getElementById(elementId);\r\n  const modal = Modal.getOrCreateInstance(myModalEl)\r\n  modal.show();\r\n};\r\n\r\nexport const hideBootstrapModal = (elementId: string): void => {\r\n  const myModalEl = document.getElementById(elementId);\r\n  const modal = Modal.getOrCreateInstance(myModalEl)\r\n  modal.hide();\r\n}\r\n\r\nexport const toggleBootstrapMoal = (elementId: string): void => {\r\n  const myModalEl = document.getElementById(elementId);\r\n  const modal = Modal.getOrCreateInstance(myModalEl)\r\n  modal.toggle();\r\n}",null,"\r\n/**\r\n * Function that returns all query parameters as an object.\r\n * Example: \r\n * Query String: ?first_name=John&last_name=Doe\r\n * Return Object: \r\n * {\r\n *    first_name: 'John',\r\n *    last_name: 'Doe'\r\n * }\r\n * @returns An object generated from query string where key is param name and value is param value\r\n */\r\nexport const getAllQueryParams = (): {} => {\r\n  const queryString = window.location.search;\r\n  const urlParams = new URLSearchParams(queryString);\r\n  const params = {};\r\n  urlParams.forEach(function (value, key) {\r\n    params[key] = value;\r\n  });\r\n  return params;\r\n};\r\n\r\n/**\r\n * Function that return value of the specified paramter in the query string\r\n * Example: \r\n * Query String: ?first_name=John&last_name=Doe\r\n * getQueryParamValue('first_name') will return 'John'\r\n * @param { string } paramName - Parameter for which value is required\r\n * @returns {string} - Value of the paramter\r\n */\r\nexport const getQueryParamValue = (paramName: string): string => {\r\n  const queryString = window.location.search;\r\n  const urlParams = new URLSearchParams(queryString);\r\n  return urlParams.get(paramName);\r\n};\r\n\r\n",null,"export const capitalizeFirstLetter = (str: string): string => {\r\n  if (!str) {\r\n    return '';\r\n  }\r\n  let strArray = str.split('.');\r\n  strArray = strArray.map(s => {\r\n    s = s.trim();\r\n    if (!s) {\r\n      return '';\r\n    }\r\n    return s.charAt(0)?.toUpperCase() + s.slice(1)?.toLowerCase();\r\n  })\r\n\r\n  return strArray.join('. ');\r\n}",null],"names":[],"version":3,"file":"module.js.map"}