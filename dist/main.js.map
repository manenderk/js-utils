{"mappings":"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CAAC,CAAA,CAAC,GAAI,CAAC,CAAC,CAAC;IAC/C,OAAO,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;CACjC,AAAA;;;AEhDM,MAAM,yCAAiB,GAAG,IAAjC;IACE,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,AAAC;IAC3C,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,AAAC;IACnD,MAAM,MAAM,GAAG,EAAE,AAAC;IAClB,SAAS,CAAC,OAAO,CAAC,SAAU,KAAK,EAAE,GAAG,EAAtC;QACE,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACrB,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;CACf,AAAC;AAUK,MAAM,yCAAkB,GAAG,CAAC,SAAiB,GAApD;IACE,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,AAAC;IAC3C,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,AAAC;IACnD,OAAO,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;CACjC,AAAC;;;;;;A,I,+B,G,a,U,S,I,S,O,E,U,E,C,E,S,E;I,S,K,C,K,E;Q,O,K,Y,C,G,K,G,I,C,C,S,O,E;Y,O,C,K,C,C;S,C,C;K;I,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;Q,S,S,C,K,E;Y,I;gB,I,C,S,C,I,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,Q,C,K,E;Y,I;gB,I,C,S,C,O,C,C,K,C,C,C;a,C,O,C,E;gB,M,C,C,C,C;a;S;Q,S,I,C,M,E;Y,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;S;Q,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;K,C,C;C,A;AE7BK,MAAM,yCAAyB,GAAG,IAAzC,+BAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;QACE,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,uCAAuC,CAAC,AAAC;QAClE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,AAAC;QAC/B,OAAO,IAAI,IAAI,EAAE,CAAC;KACnB,CAAA,AAAA;;","sources":["src/index.ts","index.ts","src/bootstrap/bootstrap_utilities.ts","bootstrap_utilities.ts","src/medias/media.ts","media.ts","src/miscelleneous/password.ts","password.ts","src/numbers/currency.ts","currency.ts","src/miscelleneous/locale.ts","locale.ts","src/strings/sentences.ts","sentences.ts","src/url/query_params.ts","query_params.ts","src/miscelleneous/phone.ts","phone.ts"],"sourcesContent":["import {\r\n  hideBootstrapModal, showBootstrapModal, toggleBootstrapMoal\r\n} from \"./bootstrap/bootstrap_utilities\";\r\nimport { getFileFromDataURL } from \"./medias/media\";\r\nimport { checkPasswordStrength, PasswordStrength, StrengthFactors } from './miscelleneous/password';\r\nimport { formatNumberAsCurrency } from \"./numbers/currency\";\r\nimport { capitalizeFirstLetter, getCapitalizedString, getCaptializedStringFromArray } from \"./strings/sentences\";\r\nimport { getAllQueryParams, getQueryParamValue } from \"./url/query_params\";\r\nimport { getUserCountryCallingCode } from \"./miscelleneous/phone\";\r\n\r\nexport {\r\n  // Bootstrap\r\n  showBootstrapModal,\r\n  hideBootstrapModal,\r\n  toggleBootstrapMoal,\r\n\r\n  // Query Params\r\n  getQueryParamValue,\r\n  getAllQueryParams,\r\n\r\n  //Currency\r\n  formatNumberAsCurrency,\r\n\r\n  // Sentences\r\n  capitalizeFirstLetter,\r\n  getCapitalizedString,\r\n  getCaptializedStringFromArray,\r\n\r\n  // Media\r\n  getFileFromDataURL,\r\n\r\n  // Passwords\r\n  checkPasswordStrength,\r\n  StrengthFactors,\r\n  PasswordStrength,\r\n\r\n  // Phone\r\n  getUserCountryCallingCode,\r\n};",null,"import Modal from 'bootstrap/js/dist/modal';\r\n\r\n/**\r\n * Function that will opens a bootstrap modal\r\n * @param modalId - HTML ID of the bootstrap modal\r\n */\r\nexport const showBootstrapModal = (modalId: string): void => {\r\n  const myModalEl = document.getElementById(modalId);\r\n  const modal = Modal.getOrCreateInstance(myModalEl)\r\n  modal.show();\r\n};\r\n\r\n/**\r\n * Function that will close a bootstrap modal\r\n * @param modalId - HTML ID of the bootstrap modal\r\n */\r\nexport const hideBootstrapModal = (modalId: string): void => {\r\n  const myModalEl = document.getElementById(modalId);\r\n  const modal = Modal.getOrCreateInstance(myModalEl)\r\n  modal.hide();\r\n}\r\n\r\n/**\r\n * Function that will toggle the show hide state of bootstrap modal\r\n * @param modalId - HTML ID of the bootstrap modal\r\n */\r\nexport const toggleBootstrapMoal = (modalId: string): void => {\r\n  const myModalEl = document.getElementById(modalId);\r\n  const modal = Modal.getOrCreateInstance(myModalEl)\r\n  modal.toggle();\r\n}",null,"/**\r\n * Function that transforms Data URL into the file\r\n * @param dataURL - Data URL from which the file has to be generated\r\n * @param fileName - Name of file that you require in generated file object\r\n * @returns File\r\n */\r\nexport const getFileFromDataURL = (dataURL: string, fileName = 'image'): File => {\r\n  const base64 = dataURL.split('.')[1];\r\n  const mimeType = dataURL.split('.')[0].split(':')[1].split(';')[0];\r\n  const fileExt = mimeType.split('/')[1];\r\n  if (fileName.indexOf(fileExt) == -1) {\r\n    fileName += `.${fileExt}`;\r\n  }\r\n  const file = new File([base64], fileName, {type: mimeType});\r\n  return file;\r\n}",null,"/**\r\n * @module @manenderk/js-utils/password\r\n */\r\n\r\n/**\r\n * Enum for PassswordStrength\r\n */\r\nexport enum PasswordStrength {\r\n  weak = \"weak\",\r\n  medium = \"medium\",\r\n  strong = \"strong\",\r\n}\r\n\r\n/**\r\n * Enum for Password Strength\r\n */\r\nexport enum StrengthFactors {\r\n  hasUpperCase = \"hasUpperCase\",\r\n  hasLowerCase = \"hasLowerCase\",\r\n  hasDigit = \"hasDigit\",\r\n  hasSpecialCharacter = \"hasSpecialCharacter\",\r\n  hasMinimum6CharacterLength = \"hasMinimum6CharacterLength\",\r\n}\r\n\r\n/**\r\n * Function that determines the strength of provided password\r\n * @example\r\n * checkPasswordStrength('thisIsPassword')\r\n * returns\r\n * {\r\n *    strength: PasswordStrength.weak,\r\n *    failingFactors= [\r\n *        StrengthFactors.hasDigit,\r\n *        StrengthFactors.hasSpecialCharacter\r\n *    ]\r\n * }\r\n * @param password - Password to Validate\r\n * @returns - Returns Strength of Password And Missing Strengh Factors\r\n */\r\nexport const checkPasswordStrength = (\r\n  password: string\r\n): {\r\n  strength: PasswordStrength;\r\n  failingFactors: StrengthFactors[];\r\n} => {\r\n  let strength: PasswordStrength = PasswordStrength.weak;\r\n  let failingFactors: StrengthFactors[] = [];\r\n\r\n  const hasUpperCase = /[A-Z]/.test(password);\r\n  const hasLowerCase = /[a-z]/.test(password);\r\n  const hasDigit = /\\d/.test(password);\r\n  const hasSpecialCharacter = /[!@#\\$%\\^\\&*\\)\\(+=._-]/.test(password);\r\n  const passwordLength = password.length;\r\n\r\n  if (\r\n    hasUpperCase &&\r\n    hasLowerCase &&\r\n    hasDigit &&\r\n    hasSpecialCharacter &&\r\n    passwordLength >= 8\r\n  ) {\r\n    strength = PasswordStrength.strong;\r\n  } else if (\r\n    hasUpperCase &&\r\n    hasLowerCase &&\r\n    hasDigit &&\r\n    hasSpecialCharacter &&\r\n    passwordLength >= 6\r\n  ) {\r\n    strength = PasswordStrength.medium;\r\n  } else if (\r\n    hasUpperCase &&\r\n    hasLowerCase &&\r\n    hasSpecialCharacter &&\r\n    passwordLength >= 8\r\n  ) {\r\n    strength = PasswordStrength.medium;\r\n  } else {\r\n    strength = PasswordStrength.weak;\r\n  }\r\n\r\n  if (!hasUpperCase) {\r\n    failingFactors.push(StrengthFactors.hasUpperCase);\r\n  }\r\n  if (!hasLowerCase) {\r\n    failingFactors.push(StrengthFactors.hasLowerCase);\r\n  }\r\n  if (!hasDigit) {\r\n    failingFactors.push(StrengthFactors.hasDigit);\r\n  }\r\n  if (!hasSpecialCharacter) {\r\n    failingFactors.push(StrengthFactors.hasSpecialCharacter);\r\n  }\r\n  if (passwordLength < 6) {\r\n    failingFactors.push(StrengthFactors.hasMinimum6CharacterLength);\r\n  }\r\n\r\n  return {\r\n    strength,\r\n    failingFactors,\r\n  };\r\n};\r\n",null,"import { getUserLanguageLocale } from \"../miscelleneous/locale\";\r\n\r\n/**\r\n * \r\n * @param num - Number value to be formatted\r\n * @param currency - Curreny alphabetic code underwhich which number to be formatted. Default is USD\r\n * @param locale - Language locale. Default is locale set in user's machine\r\n * @returns Number formatted in currency\r\n */\r\nexport const formatNumberAsCurrency = (\r\n  num: number | string,\r\n  currency: string = \"USD\",\r\n  locale?: string\r\n): string => {\r\n  num = num || 0;\r\n  if (typeof num == 'string') {\r\n    num = parseFloat(num);\r\n  }\r\n\r\n  if (!locale) {\r\n    locale = getUserLanguageLocale();\r\n  }\r\n\r\n  const formatter = new Intl.NumberFormat(locale, {\r\n    style: \"currency\",\r\n    currency: currency\r\n  });\r\n  return formatter.format(num);\r\n};\r\n",null,"export const getUserLanguageLocale = (): string => {\r\n  const userLocale =\r\n    navigator.languages && navigator.languages.length\r\n      ? navigator.languages[0]\r\n      : navigator.language;\r\n    return userLocale;\r\n};\r\n",null,"/**\r\n * Function that will capitalize first letter of each sentence in a string.\r\n * @example\r\n * To format string: hi i am john doe. i am a developer.'\r\n * capitalizeFirstLetter('hi i am john doe. i am a developer.')\r\n * returns Hi i am john doe. I am a developer.\r\n * @param str - String that has to be formatted\r\n * @returns Formatted String\r\n */\r\nexport const capitalizeFirstLetter = (str: string): string => {\r\n  if (!str) {\r\n    return '';\r\n  }\r\n  let strArray = str.split('.');\r\n  strArray = strArray.map(s => {\r\n    s = s.trim();\r\n    if (!s) {\r\n      return '';\r\n    }\r\n    return s.charAt(0)?.toUpperCase() + s.slice(1)?.toLowerCase();\r\n  })\r\n\r\n  return strArray.join('. ');\r\n}\r\n\r\n/**\r\n * Function that will captialize first letter of each word in a string\r\n * @example\r\n * To format string: hi i am john doe.\r\n * capitalizeString('hi i am john doe.')\r\n * returns Hi I Am John Doe\r\n * @param str String that has to be formatted\r\n * @returns \r\n */\r\nexport const getCapitalizedString = (str: string): string => {\r\n  if (!str) {\r\n    return '';\r\n  }\r\n  let strArray = str.split(' ');\r\n  strArray = strArray.map(word => capitalizeFirstLetter(word));\r\n  strArray = strArray.filter(s => s);\r\n  return strArray.join(' ');\r\n}\r\n\r\n/**\r\n * Function that captialize each entry of input array and return a string by joining all enteries\r\n * @example\r\n * getCaptializedStringFromArray(['hi', 'i', 'am', 'john', 'doe'])\r\n * returns Hi I Am John Doe\r\n * @param strArray Array of string which has to be formatted\r\n * @returns String where each array element is capitalized\r\n */\r\nexport const getCaptializedStringFromArray = (strArray: string[]): string => {\r\n  if (!strArray || strArray.length == 0) {\r\n    return;\r\n  }\r\n  let formattedArray = strArray.map(s => capitalizeFirstLetter(s));\r\n  formattedArray = formattedArray.filter(s => s);\r\n  return formattedArray.join(' ');\r\n}",null,"/**\r\n * Function that returns all query parameters as an object.\r\n * @example\r\n * Query String: ?first_name=John&last_name=Doe\r\n * Return Object:\r\n * \\{\r\n *    first_name: 'John',\r\n *    last_name: 'Doe'\r\n * \\}\r\n * @returns An object generated from query string where key is param name and value is param value\r\n */\r\nexport const getAllQueryParams = (): {} => {\r\n  const queryString = window.location.search;\r\n  const urlParams = new URLSearchParams(queryString);\r\n  const params = {};\r\n  urlParams.forEach(function (value, key) {\r\n    params[key] = value;\r\n  });\r\n  return params;\r\n};\r\n\r\n/**\r\n * Function that return value of the specified paramter in the query string\r\n * @example\r\n * Query String: ?first_name=John&last_name=Doe\r\n * getQueryParamValue('first_name') will return 'John'\r\n * @param paramName - Parameter for which value is required\r\n * @returns Value of the paramter\r\n */\r\nexport const getQueryParamValue = (paramName: string): string => {\r\n  const queryString = window.location.search;\r\n  const urlParams = new URLSearchParams(queryString);\r\n  return urlParams.get(paramName);\r\n};\r\n",null,"/**\r\n * Function that returns a calling/phone country code\r\n * @returns Calling/Phone Country code of the user\r\n */\r\nexport const getUserCountryCallingCode = async (): Promise<string> => {\r\n  const resp = await fetch(\"https://ipapi.co/country_calling_code\");\r\n  const data = await resp.text();\r\n  return data || '';\r\n}",null],"names":[],"version":3,"file":"main.js.map"}